# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 11:08:11 2021

@author: g_dic
"""

import os
from os.path import expanduser
import numpy as np
from qtpy import QtGui, QtWidgets, QtCore
from time import time
from distutils.version import StrictVersion
import pyqtgraph as pg
import flika
from flika import global_vars as g
from flika.window import Window
from flika.utils.io import tifffile
from flika.images import image_path
from flika.process.file_ import open_file

flika_version = flika.__version__
if StrictVersion(flika_version) < StrictVersion('0.2.23'):
    from flika.process.BaseProcess import BaseProcess, SliderLabel, CheckBox, ComboBox
else:
    from flika.utils.BaseProcess import BaseProcess, SliderLabel, CheckBox, ComboBox
    
from flika import *
import pandas as pd
from matplotlib import pyplot as plt

import threading
#from multiprocessing import Pool
from multiprocessing import freeze_support
from pathos.threading import ThreadPool
from pathos.pools import ProcessPool
from pathos.serial import SerialPool

# start flika
start_flika()

# import original data
originalData_path = r"C:\Users\g_dic\Dropbox\BSU\forLuca\20201119_Cal1site_20ms_lessdrift.tif"
dataWin  = open_file(originalData_path)

# import drift data generated by thunderSTORM
driftData_path = r"C:\Users\g_dic\Dropbox\BSU\forLuca\20201119_Cal1site_20ms_lessdrift_DRIFT_graph.csv"
driftData = pd.read_csv(driftData_path)

# drift corrected image save path
driftCorrected_savePath = originalData_path.split('.')[0] + '_driftCorrected.tif'

#Keep averaged drift only - binned
#driftData = driftData[['X2','Y2','Y3']]
#driftData = driftData.rename(columns={"X2": "frame", "Y2": "X-drift", "Y3": "Y-drift"})
#X drift
#driftData.plot(x='frame',y='X-drift')
#Y drift
#driftData.plot(x='frame',y='Y-drift')

#Keep drift points only
driftData = driftData[['frame','drift_[nm]','Y1']]
driftData = driftData.rename(columns={"drift_[nm]": "X-drift", "Y1": "Y-drift"})
#X drift
#driftData.plot(x='frame',y='X-drift')
#Y drift
#driftData.plot(x='frame',y='Y-drift')

#Get average drift values for each frame
averageDrift_df = driftData.groupby('frame').agg([np.mean,np.std])
# flatten column names
averageDrift_df.columns = [col for col in averageDrift_df.columns.values]

#plot
#average X drift
#averageDrift_df.plot(y=('X-drift', 'mean'))
#average Y drift
#averageDrift_df.plot(y=('Y-drift', 'mean'))

#calculate cumulative drift
#cumulativeDrift_df = averageDrift_df.cumsum()[[('X-drift', 'mean'),('Y-drift', 'mean')]]
#cumulative X drift
#cumulativeDrift_df.plot(y=('X-drift', 'mean'))
#cumulative Y drift
#cumulativeDrift_df.plot(y=('Y-drift', 'mean'))

# translate each frame of image stack using drift x y
from skimage import transform
from skimage import img_as_float
from tqdm import tqdm

data = dataWin.imageArray()
n, x, y = data.shape

# reduce memory use
driftData = None
dataWin.close()
dataWin = None

# the drift axis were reversed somewhere - swapping x,y function input to compensate
#TODO fix this
def getTranslationMatrix(y,x):
    mat = np.array([[1,0,x],
                    [0,1,y],
                    [0,0,1]])    
    return mat

# Single thread
#newArray = np.zeros_like(data,dtype='uint16')
# for i in tqdm(range(0,n)):
#     if i == 0:
#         matrix = getTranslationMatrix(0,0)
#     else:        
#         matrix = getTranslationMatrix(-(averageDrift_df[('X-drift', 'mean')][i]/107),(-averageDrift_df[('Y-drift', 'mean')][i]/107))
    
#     tform = transform.EuclideanTransform(matrix)    
#     img = img_as_float(data[i]) *60000
#     tf_img = transform.warp(img, tform.inverse)
#     newArray[i] = tf_img.astype('uint16')

############# Using serial pool #############
#TODO Is this actually faster?
def transformFrame(i):
    if i == 0:
        matrix = getTranslationMatrix(0,0)
    else:        
        matrix = getTranslationMatrix(-(averageDrift_df[('X-drift', 'mean')][i]/107),(-averageDrift_df[('Y-drift', 'mean')][i]/107))
    
    tform = transform.EuclideanTransform(matrix)    
    img = img_as_float(data[i]) *60000
    tf_img = transform.warp(img, tform.inverse) 
    print('\rFrame # {} of {} finished'.format(i,n), end='', flush=True) 
    return tf_img.astype('uint16')

print("Multi-processing running...")
iterations = list(range(n))        
pool = SerialPool()
results = pool.imap(transformFrame, iterations)
All_Frames_List = list(results)
print("\nMulti-processing finished!")

newArray = np.stack(All_Frames_List)
results = None
All_Frames_List = None
###########################################

# reduce unneeded items in memory
data = None
averageDrift_df = None
img = None

# display drift corrected stack
driftCorrected_win = Window(newArray)
driftCorrected_win.setAsCurrentWindow()

# save drift corrected tif
driftCorrected_win.save(driftCorrected_savePath)
print('Drift corrected image saved as: ' + driftCorrected_savePath)