#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 15, 2018 03:59:52 PM

import sys, os, glob, random
import cv2
import PIL.Image, PIL.ImageTk
from google_images_download import google_images_download
import pyttsx3
from threading import Thread
from pygame import mixer

#class instantiation
response = google_images_download.googleimagesdownload() 

engine = pyttsx3.init()
voices = engine.getProperty('voices')
rate = engine.getProperty('rate')
volume = engine.getProperty('volume')
#engine.say('Start')
#engine.runAndWait()

mixer.init()
mixer.music.load('Freshkitos_NeoPop_2016.mp3')

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    init(root, top)
    #root.mainloop()

w = None

def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


def hex_code_colors():
    a = hex(random.randrange(0,256))
    b = hex(random.randrange(0,256))
    c = hex(random.randrange(0,256))
    a = a[2:]
    b = b[2:]
    c = c[2:]
    if len(a)<2:
        a = "0" + a
    if len(b)<2:
        b = "0" + b
    if len(c)<2:
        c = "0" + c
    z = a + b + c
    return "#" + z.upper()

def randomFont():
    fonts = ['Comic Sans MS', 'Arial', 'Helvetica', 'Times New Roman', 'Times', 'Courier', 'Courier New', 'Palatino', 'Garamond',
             'Bookman', 'Avant Garde', 'Verdana', 'Georgia', 'Trebuchet MS', 'Arial Black', 'Impact']
    
    font = fonts[random.randint(0, (len(fonts)-1))] 
    return font

def startPlaying():
    #mixer.music.play()
    return

def stopPlaying():
    mixer.music.pause()


def play_sound(self, sound_file, time = 0):
        # Windows
        if platform.system() == 'Windows':
            winsound.PlaySound(sound_file, winsound.SND_ASYNC)
        # Linux
        elif platform.system() == "Linux":
            os.system("aplay -q {}&".format(sound_file))
        # Mac
        else:
            os.system("afplay {}&".format(sound_file))

        if time > 0:
	        turtle.ontimer(lambda: self.play_sound(sound_file, time), t=int(time * 1000)) 


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("1049x762+512+137")
        top.title("amnion by aion unwen")
        top.configure(background="#d9d9d9")

        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=0.01, rely=0.03, relheight=0.8, relwidth=0.98)
        self.Canvas1.configure(background='#000000')
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="#000000")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=1033)

        self.Message1 = Message(self.Canvas1)
        self.Message1.place(relx=0.25, rely=0.44, relheight=0.15, relwidth=0.47)
        self.Message1.configure(background='#000000')
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''''')
        self.Message1.configure(width=486)
        self.Message1.configure(font=('Comic Sans MS', 30))

        self.Button1 = Button(top)
        self.Button1.place(relx=0.11, rely=0.85, height=73, width=176)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Start''')
        self.Button1.configure(width=176)
        self.Button1.configure(command = lambda: self.start())

        self.Button2 = Button(top)
        self.Button2.place(relx=0.31, rely=0.85, height=73, width=176)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Stop''')
        self.Button2.configure(command = lambda: self.stop())

        self.Button3 = Button(top)
        self.Button3.place(relx=0.52, rely=0.85, height=73, width=176)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Get Images''')
        self.Button3.configure(command = lambda: self.getImages())

        self.Button4 = Button(top)
        self.Button4.place(relx=0.72, rely=0.85, height=73, width=176)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Speech On''')
        self.Button4.configure(command = lambda: self.speechButton())

        cv_img = cv2.cvtColor(cv2.imread("testImage.png"), cv2.COLOR_BGR2RGB)
        #height, width, no_channels = cv_img.shape  
        self.defaultPhoto = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(cv_img))      
        #self.image_on_canvas = self.Canvas1.create_image(0, 0, image=self.defaultPhoto, anchor=NW)

        self.loadTxt()
        self.messageFlag = False       
        self.updateMessageStart()
        
        self.speechFlag = True
        
        root.mainloop()
        return

    #### Methods ###

    def start(self):
        if self.messageFlag == False:
            self.messageFlag = True
            self.updateMessageStart()  
            self.playSound()
        return

    def stop(self):
        if self.messageFlag == True:
            self.messageFlag = False
            stopPlaying()
        return
    
    def loadTxt(self, fileName = 'text.txt'):
        file = open(fileName, 'r')
        allText = file.read()
        file.close()
        self.title, body = allText.split(',')
        newBody = "".join(body.split("\n"))
        self.text = newBody.split('â€”')
        self.textIndex = 0
        
        self.Message1.configure(text=self.title)
        self.Message1.configure(width=486)
        self.Message1.configure(font=('Arial', 30))
        self.Message1.configure(foreground="white")
        return

    def updateMessageStart(self):
        if self.messageFlag: 
            self.word = self.text[self.textIndex]
            #print(self.word)
            self.updateImage()
            self.Message1.configure(text=self.word)
            self.Message1.configure(background=hex_code_colors())
            self.Message1.configure(font = (randomFont(), 30))
            self.Message1.place(relx=0.5*random.random(), rely=0.6*random.random(), relheight=0.15, relwidth=0.47+(random.random()/5))
                           
            self.textIndex += 1
            delay = random.randint(600,1500)
            root.after(delay, self.updateMessageStart)

            try:
                #height, width, no_channels = self.photo.shape  
                x = 0
                y = 0
                root.after(delay, self.Canvas1.create_image(x, y, image=self.photo, anchor=NW))
            except:
                pass
        return

    def updateImage(self):
        try:
            directory = 'downloads' + '\\ ' + self.word
            possibleImages = os.listdir(directory)
            randomImage = possibleImages[random.randint(0, len(possibleImages)-1)]
            path = directory + '\\' + randomImage
            #print(randomImage)
            cv_img = cv2.cvtColor(cv2.imread(path), cv2.COLOR_BGR2RGB)
            average_colour = [cv_img [:, :, i].mean() for i in range(cv_img .shape[-1])]   
            self.imageColour = '#%02x%02x%02x' % (int(average_colour[0]),int(average_colour[1]),int(average_colour[2]))
            self.Canvas1.configure(background=self.imageColour)
            self.height, self.width, self.no_channels = cv_img.shape  
            self.photo = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(cv_img)) 
        except:
            self.photo = self.defaultPhoto
            
        self.Canvas1.delete("all") 
        self.speakText()
        return

    def speakText(self):
        if self.speechFlag == False:
            return
        voice = random.choice(voices)
        engine.setProperty('voice', voice.id)
        #rateChange = random.randint(0,50)
        #if random.random() <0.5:
        #    rateChange = rateChange * -1
        #engine.setProperty('rate', rate + rateChange)
        #volChange = random.random()
        #if random.random() <0.5:
        #    volChange = volChange * -1      
        #engine.setProperty('volume', volume + volChange)

        engine.say(self.word)
        engine.runAndWait()
        return
  
    def getImages(self, limit=5):
        #avoid dowloading disturbing images!
        blackList = [' monsterschwanz',' futanari', 'anal','squirting','sex','fisting']
        #need to make sure not already in downloads
        searchList = []
        alreadyExists = os.listdir('downloads')
        noDuplicates = set(self.text)
        noDuplicates = list(noDuplicates)        
        excluded = blackList + alreadyExists
        
        for word in noDuplicates:
            if ' ' + word not in excluded:
                if word not in excluded:
                    searchList.append(word)
        
        searchItems = ','.join(searchList)  
        arguments = {"keywords":searchItems,"limit":limit,"print_urls":True}   #creating list of arguments
        paths = response.download(arguments)   #passing the arguments to the function
        return

    def speechButton(self):
        if self.speechFlag == False:
            self.speechFlag = True
            self.Button4.configure(text='''Speech OFF''')
            
        else:
            self.speechFlag = False
            self.Button4.configure(text='''Speech ON''')
            
            
    def playSound(self):
        global sound_thread 
        sound_thread = Thread(target=startPlaying)
        sound_thread.start()

if __name__ == '__main__':
    vp_start_gui()





