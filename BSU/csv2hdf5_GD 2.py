# -*- coding: utf-8 -*-
"""
Created on Sun May  5 15:43:13 2019

@author: George
"""

import pandas as pd
import numpy as np
import h5py


filePath =r"C:\Users\g_dic\OneDrive\Desktop\BSU_DATA\002_dNAM-Exp01-wReg_100pM-100uL-30min_Mid-3nM-18mM-Mg 2019 March 04 11_10_26-locs.csv"
savePath = filePath.split('.')[0] + '_fixed'

df = pd.read_csv(filePath)

colNames = list(df.columns)

print(colNames) 

df.rename(index=str, columns={'x [nm]': 'x_nm',
                              'y [nm]': 'y_nm',
                              'sigma [nm]': 'sigma_nm',
                              'intensity [photon]': 'intensity_photon',
                              'offset [photon]':'offset_photon',
                              'bkgstd [photon]':'bkgstd_photon',
                              'uncertainty [nm]': 'uncertainty_xy_nm'}, inplace=True)

colNames2 = list(df.columns) 

def saveHDF5(df, out_path):
    pixelsize = 107
    #from .io import save_locs   
    frames = df["frame"].astype(int)
    # make sure frames start at zero:
    x = df["x_nm"] / pixelsize
    y = df["y_nm"] / pixelsize
    photons = df["intensity_photon"].astype(int)    
    bg = df["offset_photon"].astype(int)
    lpx = df["uncertainty_xy_nm"] / pixelsize
    lpy = df["uncertainty_xy_nm"] / pixelsize

    if "z_nm" in list(df.columns):
        z = df["z_nm"] / pixelsize
        sx = df["sigma1_nm"] / pixelsize
        sy = df["sigma2_nm"] / pixelsize
    
    
        LOCS_DTYPE = [
            ("frame", "u4"),
            ("x", "f4"),
            ("y", "f4"),
            ("z", "f4"),
            ("photons", "f4"),
            ("sx", "f4"),
            ("sy", "f4"),
            ("bg", "f4"),
            ("lpx", "f4"),
            ("lpy", "f4"),
        ]

                    
        locs = np.rec.array((frames, x, y, z, photons, sx, sy, bg, lpx, lpy),dtype=LOCS_DTYPE,)

    else:
        sx = df["sigma_nm"] / pixelsize
        sy = df["sigma_nm"] / pixelsize        

        LOCS_DTYPE = [
            ("frame", "u4"),
            ("x", "f4"),
            ("y", "f4"),
            ("photons", "f4"),
            ("sx", "f4"),
            ("sy", "f4"),
            ("bg", "f4"),
            ("lpx", "f4"),
            ("lpy", "f4"),
        ]

        locs = np.rec.array((frames, x, y, photons, sx, sy, bg, lpx, lpy),dtype=LOCS_DTYPE,)


    locs.sort(kind="mergesort", order="frame")
    
    img_info = {}
    img_info["Generated by"] = "Picasso csv2hdf"
    img_info["Frames"] = int(np.max(frames)) + 1
    img_info["Height"] = int(np.ceil(np.max(y)))
    img_info["Width"] = int(np.ceil(np.max(x)))

    info = []
    info.append(img_info)

    #base, ext = os.path.splitext(path)
    #out_path = base + "_locs.hdf5"
    #save_locs(out_path, locs, info)
    
    h5pyPath = out_path + ".hdf5"
    
    with h5py.File(h5pyPath, "w") as locs_file:
        locs_file.create_dataset("locs", data=locs)
    
    print("hdf5 Saved to {}.".format(h5pyPath)) 

    yamlPath = out_path + ".yaml"
    
    with open(yamlPath, "w") as file: 
        # Writing data to a file 
        file.write("Frames: {}\n".format(img_info["Frames"])) 
        file.write("Generated by: {}\n".format(img_info["Generated by"]))         
        file.write("Height: {}\n".format(img_info["Height"]))         
        file.write("Width: {}\n".format(img_info["Width"]))   

    print("yaml Saved to {}.".format(yamlPath)) 
    
    return


#df.to_csv(savePath, index=False)
saveHDF5(df,savePath)

print('Done')